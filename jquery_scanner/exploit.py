import sys
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

class colors:
        red  ='\033[91m'
        green='\033[92m'
        blue ='\033[94m'
        reset='\033[0m'


def show_msg(status,url,http_code,http_body):
    msg=''
    n=0
    unit='B'
    if len(http_body)>(1024*1024):
        unit='MB'
        n=len(http_body)/(1024*1024)
    elif len(http_body)>1024:
        unit='KB'
        n=len(http_body)/(1024)

    if status == 'fail':
        msg=f'{colors.red}[-] '
        msg+=f'{url}{colors.reset}'
    if status == 'susses':
        msg=f'{colors.green}[+] '
        msg+=f'{url} [{http_code}] - {n:.2f}{unit}{colors.reset}'
    return msg


def brute_scan(url:str):
    with open('version_list.txt', 'r') as f:
        versions = f.read().split('\n')

    for ver in versions:
        tmp=url.replace('<VERSION_SCAN>',ver)
        res=requests.get(tmp,verify=False)
        if res.status_code==200:
            print(show_msg('susses',tmp,res.status_code,res.text))
        else:
            print(show_msg('fail',tmp,res.status_code,res.text))


def version_crawl(url:str):
    with open('version_list.txt', 'r') as f:
        versions = f.read().split('\n')

    res=requests.get(url,verify=False)

    find_ver=[]
    for ver in versions:
        if ver in res.text:
            find_ver.append(ver)

    if find_ver:
        print(find_ver)
    else:
        print('Nonthing :(')

# python3 exploit.py "https://code.jquery.com/jquery-<VERSION_SCAN>.min.js"
def main(param):
    if len(param)<2:
        print(f'python {param[0]} "https://target.com/js/jquery-<VERSION_SCAN>.min.js"')
        print(f'python {param[0]} "https://target.com/js/jquery.min.js"')
        exit(0)
    url=param[1]
    if '<VERSION_SCAN>' in url:
        brute_scan(url)
    else:
        version_crawl(url)

if __name__ == '__main__':
    main(sys.argv)